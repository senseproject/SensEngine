project(renderer)

IF(CMAKE_COMPILER_IS_GNUCXX)
    IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=nocona")
    ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=pentium4")
    ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -Wall -Wno-deprecated -Werror -mtune=core2 -msse2")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)
IF(MSVC)
    ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS")
    ADD_DEFINITIONS("-DNOMINMAX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
ENDIF(MSVC)

IF(WIN32)
  SET(PLATFORM "w32")
ELSE(WIN32)
  SET(PLATFORM "x11")
  FIND_PACKAGE(X11 REQUIRED)
  SET(PLATFORM_LIBRARIES ${X11_LIBRARIES})
ENDIF(WIN32)

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Boost COMPONENTS system thread REQUIRED)

ADD_DEFINITIONS(-DGLEW_STATIC)
INCLUDE_DIRECTORIES("3rdparty/glew")
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
add_executable(renderer_demo main.cpp Pipeline.cpp Pipeline_${PLATFORM}.cpp ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glew/glew.c Drawbuffer.cpp Material.cpp Texture.cpp RenderTarget.cpp)

TARGET_LINK_LIBRARIES(renderer_demo ${OPENGL_gl_LIBRARY} ${PLATFORM_LIBRARIES} ${Boost_LIBRARIES})
